#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdint.h>
#include <string.h>

#define NUM_DIGITS 2000

struct BigInteger
{
    char *digits;
    int length;
};

// Function to get the current value of the Time Stamp Counter
static inline uint64_t rdtsc(void)
{
    unsigned int lo, hi;
    asm volatile("rdtsc" : "=a"(lo), "=d"(hi));
    return ((uint64_t)hi << 32) | lo;
}

void multiply(struct BigInteger *num1, struct BigInteger *num2, struct BigInteger *final_result)
{
    int len1 = num1->length;
    int len2 = num2->length;
    long int product, carry;

    for (int i = 0; i < len1; i++)
    {
        carry = 0;
        for (int j = 0; j < len2; j++)
        {
            product = num1->digits[i] * num2->digits[j] + final_result->digits[i + j] + carry;
            carry = product / 10;
            final_result->digits[i + j] = product % 10;
        }

        if (carry)
        {
            final_result->digits[i + len2] += carry;
        }
    }

    while (final_result->length > 1 && final_result->digits[final_result->length - 1] == 0)
    {
        final_result->length--;
    }
}

void generate_seed()
{
    // Get the current time
    time_t now = time(0);

    // Get the process ID
    pid_t pid = getpid();

    // Combine the current time and the process ID to create a seed
    unsigned int seed = now ^ pid;

    // Set the seed for the rand() function
    srand(seed);
}

int main()
{
    struct BigInteger *nums = (struct BigInteger *)malloc(NUM_DIGITS * sizeof(struct BigInteger));
    struct BigInteger *results = (struct BigInteger *)malloc((NUM_DIGITS / 2) * sizeof(struct BigInteger));

    generate_seed();

    // Generate random numbers for testing
    for (int i = 0; i < NUM_DIGITS; i++)
    {
        int randomNumber1 = rand() % 10;
        int randomNumber2 = rand() % 10;

        nums[i].digits = (char *)malloc(2 * sizeof(char));
        nums[i].digits[0] = '0' + randomNumber1;
        nums[i].digits[1] = '\0';
        nums[i].length = 1;
    }

    for (int i = 0; i < NUM_DIGITS / 2; i++)
    {
        int randomNumber1 = rand() % 10;
        int randomNumber2 = rand() % 10;

        results[i].digits = (char *)calloc(2 * NUM_DIGITS, sizeof(char));
        results[i].digits[0] = '0' + randomNumber1;
        results[i].digits[1] = '\0';
        results[i].length = 1;
    }

    uint64_t start_ticks, end_ticks, total_ticks, min_ticks = UINT64_MAX;
    total_ticks = 0;

    // Run Vedic multiplication
    for (int i = 0; i < NUM_DIGITS; i += 2)
    {
        start_ticks = rdtsc();
        multiply(&nums[i], &nums[i + 1], &results[i / 2]);
        end_ticks = rdtsc();

        uint64_t ticks = end_ticks - start_ticks;
        total_ticks += ticks;
        if (ticks < min_ticks)
            min_ticks = ticks;
    }

    printf("Minimum ticks: %lu\n", min_ticks);
    printf("Total ticks: %lu\n", total_ticks);

    // Free allocated memory
    for (int i = 0; i < NUM_DIGITS; i++)
    {
        free(nums[i].digits);
    }
    free(nums);

    for (int i = 0; i < NUM_DIGITS / 2; i++)
    {
        free(results[i].digits);
    }
    free(results);

    return 0;
}
