#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include <gmp.h>

#define MAX_SIZE 1024
#define NUMBER_OF_BITS 8192

long long toom_cook_mul(long long x, long long y) {
    if (x < 10 || y < 10) {
        return x * y;
    }

    int m = MAX_SIZE / 6;
    long long x_parts[3], y_parts[3];

    void split_number(long long n, int m, long long *parts) {
        long long divisor = 1;
        for (int i = 0; i < 3; i++) {
            parts[i] = n / divisor % (long long)pow(10, m);
            divisor *= (long long)pow(10, m);
        }
    }

    split_number(x, m, x_parts);
    split_number(y, m, y_parts);

    printf("x_parts: %lld %lld %lld\n", x_parts[0], x_parts[1], x_parts[2]);
    printf("y_parts: %lld %lld %lld\n", y_parts[0], y_parts[1], y_parts[2]);

    long long p0 = x_parts[0] * y_parts[0];
    long long p1 = (x_parts[0] + x_parts[1] + x_parts[2]) * (y_parts[0] + y_parts[1] + y_parts[2]);
    long long p2 = (x_parts[0] - x_parts[1] + x_parts[2]) * (y_parts[0] - y_parts[1] + y_parts[2]);

    printf("p0: %lld\n", p0);
    printf("p1: %lld\n", p1);
    printf("p2: %lld\n", p2);

    long long result = p0 + ((p2 - p0 - p1) / 2) * (long long)pow(10, m) + p1 * (long long)pow(10, 2 * m);

    printf("Result before returning: %lld\n", result);
    return result;
}

char* generateRandomNumber(int seed) {
    gmp_randstate_t state;
    mpz_t random_number;

    gmp_randinit_default(state);
    gmp_randseed_ui(state, time(NULL) + seed);

    mpz_init(random_number);

    mpz_urandomb(random_number, state, NUMBER_OF_BITS);

    char* resultString = mpz_get_str(NULL, 10, random_number);

    mpz_clear(random_number);
    gmp_randclear(state);

    return resultString;
}

int main() {
    int seed = rand();
    char* num1_str = generateRandomNumber(seed);
    seed = rand();
    char* num2_str = generateRandomNumber(seed);

    printf("Random number 1: %s\n", num1_str);
    printf("Random number 2: %s\n", num2_str);

    long long n = atoll(num1_str);
    long long m = atoll(num2_str);
    free(num1_str);
    free(num2_str);

    clock_t start_time = clock();
    long long result = toom_cook_mul(n, m);
    clock_t end_time = clock();

    printf("Result: %lld\n", result);
    printf("Execution Time: %lf seconds\n", (double)(end_time - start_time) / CLOCKS_PER_SEC);

    return 0;
}
