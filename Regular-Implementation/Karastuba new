#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define NUM_DIGITS 1000

struct BigInteger {
    char *digits;
    int length;
};

void karatsuba_multiply(struct BigInteger *x, struct BigInteger *y, struct BigInteger *result);
void add(struct BigInteger *a, struct BigInteger *b, struct BigInteger *result);
void subtract(struct BigInteger *a, struct BigInteger *b, struct BigInteger *result);
void normalize(struct BigInteger *num);
void initialize(struct BigInteger *num, int length);
void freeBigInteger(struct BigInteger *num);
void shiftLeft(struct BigInteger *num, int shift);

int main() {
    struct BigInteger num1, num2, result;
    char num1_string[NUM_DIGITS + 1], num2_string[NUM_DIGITS + 1];

    printf("Enter the first number to multiply: ");
    scanf("%s", num1_string);
    printf("Enter the second number to multiply: ");
    scanf("%s", num2_string);

    initialize(&num1, strlen(num1_string));
    initialize(&num2, strlen(num2_string));
    initialize(&result, num1.length + num2.length);

    strcpy(num1.digits, num1_string);
    strcpy(num2.digits, num2_string);

    karatsuba_multiply(&num1, &num2, &result);

    printf("Result: %s\n", result.digits);

    freeBigInteger(&num1);
    freeBigInteger(&num2);
    freeBigInteger(&result);

    return 0;
}

void karatsuba_multiply(struct BigInteger *x, struct BigInteger *y, struct BigInteger *result) {
    if (x->length == 0 || y->length == 0) {
        result->length = 0;
        return;
    }

    if (x->length == 1 && y->length == 1) {
        int product = (x->digits[0] - '0') * (y->digits[0] - '0');
        result->length = 1;
        result->digits[0] = product + '0';
        return;
    }

    int n = (x->length > y->length) ? x->length : y->length;
    int half = n / 2;

    struct BigInteger x_high, x_low, y_high, y_low;
    struct BigInteger z0, z1, z2, temp1, temp2;

    initialize(&x_high, x->length - half);
    initialize(&x_low, half);
    initialize(&y_high, y->length - half);
    initialize(&y_low, half);

    initialize(&z0, 2 * half);
    initialize(&z1, 2 * half);
    initialize(&z2, 2 * half);
    initialize(&temp1, 2 * half);
    initialize(&temp2, 2 * half);

    strncpy(x_high.digits, x->digits, x->length - half);
    strncpy(x_low.digits, x->digits + (x->length - half), half);
    strncpy(y_high.digits, y->digits, y->length - half);
    strncpy(y_low.digits, y->digits + (y->length - half), half);

    karatsuba_multiply(&x_high, &y_high, &z2);
    karatsuba_multiply(&x_low, &y_low, &z0);

    add(&x_high, &x_low, &temp1);
    add(&y_high, &y_low, &temp2);
    karatsuba_multiply(&temp1, &temp2, &z1);
    subtract(&z1, &z2, &temp1);
    subtract(&temp1, &z0, &z1);

    shiftLeft(&z2, 2 * half);
    shiftLeft(&z1, half);

    add(&z2, &z1, result);
    add(result, &z0, result);

    normalize(result);

    freeBigInteger(&x_high);
    freeBigInteger(&x_low);
    freeBigInteger(&y_high);
    freeBigInteger(&y_low);
    freeBigInteger(&z0);
    freeBigInteger(&z1);
    freeBigInteger(&z2);
    freeBigInteger(&temp1);
    freeBigInteger(&temp2);
}

void add(struct BigInteger *a, struct BigInteger *b, struct BigInteger *result) {
    int carry = 0;
    int i, j;

    for (i = a->length - 1, j = b->length - 1; i >= 0 || j >= 0; i--, j--) {
        int sum = carry;

        if (i >= 0)
            sum += a->digits[i] - '0';
        if (j >= 0)
            sum += b->digits[j] - '0';

        result->digits[i > j ? i : j] = sum % 10 + '0';
        carry = sum / 10;
    }

    if (carry) {
        result->digits[result->length - 1] = carry + '0';
        result->length++;
    }

    normalize(result);
}

void subtract(struct BigInteger *a, struct BigInteger *b, struct BigInteger *result) {
    int borrow = 0;
    int i, j;

    for (i = a->length - 1, j = b->length - 1; i >= 0 || j >= 0; i--, j--) {
        int diff = 0;

        if (i >= 0)
            diff += a->digits[i] - '0';
        if (j >= 0)
            diff -= b->digits[j] - '0';

        if (diff < 0) {
            diff += 10;
            borrow = 1;
        } else {
            borrow = 0;
        }

        result->digits[i > j ? i : j] = diff + '0';
    }

    normalize(result);
}

void normalize(struct BigInteger *num) {
    int i;

    while (num->length > 1 && num->digits[0] == '0') {
        for (i = 0; i < num->length - 1; i++) {
            num->digits[i] = num->digits[i + 1];
        }
        num->length--;
    }

    num->digits[num->length] = '\0';
}

void initialize(struct BigInteger *num, int length) {
    num->digits = (char *)malloc((length + 1) * sizeof(char));
    num->length = length;
}

void freeBigInteger(struct BigInteger *num) {
    free(num->digits);
}

void shiftLeft(struct BigInteger *num, int shift) {
    int i;

    for (i = num->length - 1; i >= 0; i--) {
        num->digits[i + shift] = num->digits[i];
    }

    for (i = 0; i < shift; i++) {
        num->digits[i] = '0';
    }

    num->length += shift;
    num->digits[num->length] = '\0';
}
